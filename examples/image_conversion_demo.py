#!/usr/bin/env python3
"""
LunaEngine Image Conversion Demo
With proper buttons for finding and converting images
"""

import sys
import os
import math  # Use math module for sin function
from pathlib import Path

# Add the lunaengine package to the path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from lunaengine import LunaEngine, TextLabel, Button, Dropdown
from lunaengine.utils import EmbeddedImage, ImageConverter
import pygame

class ImageConversionDemoScene:
    def __init__(self):
        self.ui_elements = []
        self.embedded_images = []
        self.animation_time = 0
        self.converted_images = []
        self.selected_image_index = 0
        self.available_images = []
        self.status_message = "Click 'Find Images' to start"
        
    def update(self, dt):
        self.animation_time += dt
        for element in self.ui_elements:
            element.update(dt)
            
    def render(self, renderer):
        # Draw background
        renderer.draw_rect(0, 0, 800, 600, (30, 30, 50))
        
        # Draw header
        renderer.draw_rect(0, 0, 800, 60, (50, 50, 80))
        
        # Draw converted images
        if self.converted_images:
            current_image = self.converted_images[self.selected_image_index]
            x, y = 400, 150
            
            # Draw with animation using math.sin
            offset_y = math.sin(self.animation_time * 2) * 10
            current_image['image'].draw(renderer, int(x), int(y + offset_y))
            
            # Draw border and info
            renderer.draw_rect(int(x), int(y + offset_y), 
                             current_image['image'].width, 
                             current_image['image'].height, 
                             (255, 255, 255), fill=False)
            
            # Draw image info
            font = pygame.font.Font(None, 20)
            info_text = f"{current_image['name']} - {current_image['image'].width}x{current_image['image'].height}"
            text_surface = font.render(info_text, True, (255, 255, 255))
            renderer.draw_surface(text_surface, x, y + current_image['image'].height + 15)

def find_image_files(directory: Path, max_depth: int = 3) -> list:
    """Find all image files using Pygame-supported formats"""
    image_files = []
    # Pygame supports these formats natively
    supported_extensions = {'.png', '.jpg', '.jpeg', '.bmp', '.tga', '.tiff'}
    
    def search_path(current_path: Path, depth: int):
        if depth > max_depth:
            return
            
        try:
            for item in current_path.iterdir():
                if item.is_file() and item.suffix.lower() in supported_extensions:
                    # Skip very large files (>10MB)
                    if item.stat().st_size < 10 * 1024 * 1024:
                        image_files.append(item)
                elif item.is_dir() and not item.name.startswith('.'):
                    search_path(item, depth + 1)
        except (PermissionError, OSError):
            pass  # Skip directories we can't access
    
    search_path(directory, 0)
    return image_files

def convert_image_file(image_path: Path, max_size: tuple = (256, 256)) -> dict:
    """Convert an image file to embedded format using PYGAME only"""
    try:
        print(f"üîÑ Converting: {image_path.name}...")
        
        # Convert the image using Pygame (NO PILLOW!)
        python_code = ImageConverter.image_to_python_code(
            str(image_path),
            output_var_name=f"embedded_{image_path.stem}",
            max_size=max_size,
            method='compressed'
        )
        
        # Parse the generated code to create embedded image
        lines = python_code.split('\n')
        image_data = {}
        
        for line in lines:
            if ':' in line and any(x in line for x in ["'width'", "'height'", "'data'", "'pixels'"]):
                key_part, value_part = line.split(':', 1)
                key = key_part.strip().strip("'\" ")
                value = value_part.strip().strip(',\'" ')
                
                if key == 'width' or key == 'height':
                    image_data[key] = int(value)
                elif key == 'data':
                    image_data[key] = value
                elif key == 'pixels':
                    image_data[key] = 'pixel_data'
        
        if image_data:
            embedded_image = EmbeddedImage(image_data)
            
            # Save the converted code to a file
            output_file = image_path.parent / f"{image_path.stem}_embedded.py"
            with open(output_file, 'w', encoding='utf-8') as f:
                header = [
                    f'# Auto-generated by LunaEngine Image Conversion Tool',
                    f'# Source: {image_path.name}',
                    f'# Converted with: Pygame (NO PILLOW REQUIRED!)',
                    f'# Generated on: {pygame.time.get_ticks()}',
                    ''
                ]
                f.write('\n'.join(header) + python_code)
            
            print(f"‚úÖ Converted: {image_path.name} -> {output_file.name}")
            
            return {
                'name': image_path.stem,
                'path': image_path,
                'image': embedded_image,
                'output_file': output_file,
                'original_size': image_path.stat().st_size,
                'converted_size': output_file.stat().st_size
            }
    
    except Exception as e:
        print(f"‚ùå Failed to convert {image_path.name}: {e}")
    
    return None

def main():
    engine = LunaEngine("Image Conversion Demo", 800, 600)
    scene = ImageConversionDemoScene()
    
    # UI Elements
    title = TextLabel(20, 20, "Image Conversion Demo", 32, (255, 255, 0))
    scene.ui_elements.append(title)
    
    subtitle = TextLabel(20, 60, "USING PYGAME ONLY - NO PILLOW REQUIRED!", 18, (100, 255, 100))
    scene.ui_elements.append(subtitle)
    
    # Status display
    status_text = TextLabel(20, 90, scene.status_message, 18, (255, 200, 100))
    scene.ui_elements.append(status_text)
    
    # Find Images Button
    def find_images():
        print("üîç Searching for image files...")
        scene.status_message = "Searching for images..."
        status_text.set_text(scene.status_message)
        
        project_root = Path(__file__).parent.parent
        scene.available_images = find_image_files(project_root)
        
        if not scene.available_images:
            scene.status_message = "No images found! Add PNG/JPG files to project."
            status_text.set_text(scene.status_message)
            print("‚ùå No image files found!")
        else:
            scene.status_message = f"Found {len(scene.available_images)} images"
            status_text.set_text(scene.status_message)
            print(f"üìÅ Found {len(scene.available_images)} image files")
            
            # Update dropdown with found images
            if hasattr(scene, 'image_dropdown'):
                scene.ui_elements.remove(scene.image_dropdown)
            
            image_names = [img.stem for img in scene.available_images]
            scene.image_dropdown = Dropdown(20, 200, 300, 30, image_names)
            scene.image_dropdown.set_on_selection_changed(lambda i, n: None)
            scene.ui_elements.append(scene.image_dropdown)
            
            # Show convert button if not already shown
            if not any(isinstance(e, Button) and e.text == "Convert Selected Image" for e in scene.ui_elements):
                convert_btn = Button(20, 240, 200, 40, "Convert Selected Image")
                
                def convert_selected():
                    if scene.available_images and hasattr(scene, 'image_dropdown'):
                        selected_index = scene.image_dropdown.selected_index
                        if selected_index < len(scene.available_images):
                            image_path = scene.available_images[selected_index]
                            print(f"üîÑ Converting selected image: {image_path.name}")
                            
                            converted = convert_image_file(image_path)
                            if converted:
                                scene.converted_images.append(converted)
                                scene.status_message = f"Converted: {image_path.name}"
                                status_text.set_text(scene.status_message)
                                print(f"‚úÖ Added to converted images: {len(scene.converted_images)} total")
                
                convert_btn.set_on_click(convert_selected)
                scene.ui_elements.append(convert_btn)
    
    find_btn = Button(20, 130, 150, 40, "Find Images")
    find_btn.set_on_click(find_images)
    scene.ui_elements.append(find_btn)
    
    # Convert All Button
    def convert_all_images():
        if not scene.available_images:
            scene.status_message = "No images to convert! Click 'Find Images' first."
            status_text.set_text(scene.status_message)
            return
        
        print("üîÑ Converting all images...")
        scene.status_message = "Converting all images..."
        status_text.set_text(scene.status_message)
        
        converted_count = 0
        for image_file in scene.available_images[:10]:  # Limit to 10 images
            converted = convert_image_file(image_file)
            if converted:
                scene.converted_images.append(converted)
                converted_count += 1
        
        scene.status_message = f"Converted {converted_count} images"
        status_text.set_text(scene.status_message)
        print(f"üéâ Converted {converted_count} images!")
    
    convert_all_btn = Button(180, 130, 150, 40, "Convert All Images")
    convert_all_btn.set_on_click(convert_all_images)
    scene.ui_elements.append(convert_all_btn)
    
    # View Converted Images Button
    def view_converted_images():
        if not scene.converted_images:
            scene.status_message = "No converted images! Convert some images first."
            status_text.set_text(scene.status_message)
            return
        
        # Create dropdown for converted images if not exists
        if not hasattr(scene, 'converted_dropdown'):
            converted_names = [img['name'] for img in scene.converted_images]
            scene.converted_dropdown = Dropdown(20, 350, 300, 30, converted_names)
            scene.converted_dropdown.set_on_selection_changed(
                lambda i, n: setattr(scene, 'selected_image_index', i)
            )
            scene.ui_elements.append(scene.converted_dropdown)
            scene.status_message = f"Viewing {len(scene.converted_images)} converted images"
            status_text.set_text(scene.status_message)
    
    view_btn = Button(340, 130, 180, 40, "View Converted Images")
    view_btn.set_on_click(view_converted_images)
    scene.ui_elements.append(view_btn)
    
    # Instructions
    instructions = [
        "How to use:",
        "1. Click 'Find Images' to discover images in your project",
        "2. Select an image from the dropdown", 
        "3. Click 'Convert Selected Image' or 'Convert All Images'",
        "4. Click 'View Converted Images' to see results",
        "5. Use arrow keys to cycle through converted images",
        "",
        "Pygame supports: PNG, JPG, BMP, TGA, TIF",
        "No external libraries needed!"
    ]
    
    for i, instruction in enumerate(instructions):
        text = TextLabel(20, 300 + i * 25, instruction, 16, (200, 200, 255))
        scene.ui_elements.append(text)
    
    # Statistics display
    stats_text = TextLabel(20, 500, "Images found: 0 | Converted: 0", 16, (100, 255, 100))
    scene.ui_elements.append(stats_text)
    
    # Update statistics
    def update_stats():
        found_count = len(scene.available_images)
        converted_count = len(scene.converted_images)
        stats_text.set_text(f"Images found: {found_count} | Converted: {converted_count}")
    
    # Override scene update to include stats update
    original_update = scene.update
    def new_update(dt):
        original_update(dt)
        update_stats()
    scene.update = new_update
    
    # Key handler for image cycling
    def handle_key_event(event):
        if event.type == pygame.KEYDOWN and scene.converted_images:
            if event.key == pygame.K_RIGHT:
                scene.selected_image_index = (scene.selected_image_index + 1) % len(scene.converted_images)
                print(f"Next image: {scene.converted_images[scene.selected_image_index]['name']}")
            elif event.key == pygame.K_LEFT:
                scene.selected_image_index = (scene.selected_image_index - 1) % len(scene.converted_images)
                print(f"Previous image: {scene.converted_images[scene.selected_image_index]['name']}")
    
    engine.on_event(pygame.KEYDOWN)(handle_key_event)
    
    engine.add_scene("main", scene)
    engine.set_scene("main")
    
    print("\n" + "="*60)
    print("IMAGE CONVERSION DEMO")
    print("="*60)
    print("Features:")
    print("‚úÖ Find Images button - discovers images automatically")
    print("‚úÖ Convert Selected button - converts chosen image") 
    print("‚úÖ Convert All button - batch converts all found images")
    print("‚úÖ View Converted button - shows converted images dropdown")
    print("‚úÖ Arrow keys - cycle through converted images")
    print("‚úÖ Live statistics - shows counts of found and converted images")
    print("‚úÖ Status messages - see what's happening")
    print("‚úÖ NO PILLOW REQUIRED - uses Pygame only")
    print()
    print("Instructions:")
    print("1. Click 'Find Images'")
    print("2. Select image from dropdown") 
    print("3. Click 'Convert Selected' or 'Convert All'")
    print("4. Click 'View Converted' to see results")
    print("5. Use arrow keys to cycle through converted images")
    print("="*60)
    
    engine.run()

if __name__ == "__main__":
    main()