name: Generate Documentation

on:
  push:
    branches: [ main, master ]
    paths: 
      - 'lunaengine/**'
      - 'generate_docs.py'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'lunaengine/**'
      - 'generate_docs.py'
  workflow_dispatch:  # Allow manual triggering
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday

env:
  PYTHON_VERSION: '3.9'

jobs:
  generate-docs:
    name: Generate and Deploy Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          **/__pycache__
        key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install project dependencies if they exist
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
          echo "‚úÖ Installed requirements.txt"
        fi
        
        # Install documentation dependencies
        pip install astunparse
        
        # Verify Python can import the project
        python -c "import sys; sys.path.insert(0, '.'); print('‚úÖ Python path configured')"

    - name: Generate documentation
      id: generate
      run: |
        set -e  # Exit on error
        
        echo "üîß Starting documentation generation..."
        
        # Check if generate_docs.py exists
        if [ ! -f "generate_docs.py" ]; then
          echo "‚ùå generate_docs.py not found!"
          exit 1
        fi
        
        # Run the documentation generator
        python generate_docs.py
        
        # Verify documentation was generated
        if [ ! -d "docs" ]; then
          echo "‚ùå Documentation folder was not created!"
          exit 1
        fi
        
        if [ ! -f "docs/index.html" ]; then
          echo "‚ùå Main index.html was not generated!"
          exit 1
        fi
        
        echo "‚úÖ Documentation generated successfully!"
        echo "docs_count=$(find docs -name '*.html' | wc -l)" >> $GITHUB_OUTPUT

    - name: Test documentation
      run: |
        echo "üß™ Testing generated documentation..."
        
        # Check if main pages exist
        required_pages=("index.html" "quick-start.html")
        for page in "${required_pages[@]}"; do
          if [ -f "docs/$page" ]; then
            echo "‚úÖ $page exists"
          else
            echo "‚ö†Ô∏è  $page missing"
          fi
        done
        
        # Check module directories
        modules=("core" "ui" "graphics" "utils" "backend" "tools")
        for module in "${modules[@]}"; do
          if [ -d "docs/$module" ] && [ -f "docs/$module/index.html" ]; then
            echo "‚úÖ $module documentation exists"
          else
            echo "‚ö†Ô∏è  $module documentation incomplete"
          fi
        done

    - name: Upload documentation artifact
      uses: actions/upload-artifact@v4
      with:
        name: lunaengine-docs
        path: docs/
        retention-days: 7
        if-no-files-found: error

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        publish_branch: gh-pages
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'üìö docs: Auto-generated documentation [skip ci]'

    - name: Documentation summary
      if: always()
      run: |
        echo "## üìö LunaEngine Documentation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "docs" ]; then
          echo "### ‚úÖ Generation Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Generated on:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Total HTML files:** $(find docs -name '*.html' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Main documentation:** [index.html](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)" >> $GITHUB_STEP_SUMMARY
          echo "- **Quick start guide:** [quick-start.html](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/quick-start.html)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìÅ Generated Modules" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for module in core ui graphics utils backend tools; do
            if [ -f "docs/$module/index.html" ]; then
              echo "- ‚úÖ **$module**: [View docs](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$module/)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ‚ö†Ô∏è  **$module**: Documentation missing" >> $GITHUB_STEP_SUMMARY
            fi
          done
        else
          echo "### ‚ùå Generation Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Documentation generation failed. Check the logs for details." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Auto-generated by GitHub Actions*" >> $GITHUB_STEP_SUMMARY

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          github.rest.issues.createComment({
            owner,
            repo,
            issue_number: context.payload.pull_request?.number || context.runId,
            body: '‚ùå Documentation generation failed! Please check the GitHub Actions logs for details.'
          });